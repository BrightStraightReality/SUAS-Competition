import unittest
import math
from PIL import Image
from SyntheticDataset2.ElementsCreator import *
from SyntheticDataset2.ImageOperations import *
from SyntheticDataset2.ImageCreator import *

class TargetCreatorTestCase(unittest.TestCase):

    def setUp(self):
        self.test_image0 = TargetCreator.create_specified_single_target("circle","?", "A", 300, 2, (255, 255, 255, 255), (0, 255, 255, 255))
        self.test_image1 = TargetCreator.create_specified_single_target("quarter_circle", "N", "A", 300, 2, (255, 255, 255, 255), (0, 255, 255, 255))
        self.test_image2 = TargetCreator.create_specified_single_target("quarter_circle", "NE", "B", 300, 2, (255, 255, 255, 255), (0, 255, 255, 255))
        self.test_image3 = TargetCreator.create_specified_single_target("quarter_circle", "E", "C", 300, 2, (255, 255, 255, 255), (0, 255, 255, 255))
        self.test_image4 = TargetCreator.create_specified_single_target("quarter_circle", "SE", "D", 300, 2, (255, 255, 255, 255), (0, 255, 255, 255))
        self.test_image5 = TargetCreator.create_specified_single_target("quarter_circle", "S", "E", 400, 2, (0, 0, 0, 255), (255, 255, 255, 255))
        self.test_image6 = TargetCreator.create_specified_single_target("quarter_circle", "SW", "F", 400, 2, (0, 0, 0, 255), (255, 255, 255, 255))
        self.test_image7 = TargetCreator.create_specified_single_target("quarter_circle", "W", "G", 400, 2, (0, 0, 0, 255), (255, 255, 255, 255))
        self.test_image8 = TargetCreator.create_specified_single_target("quarter_circle", "NW", "H", 400, 2, (0, 0, 0, 255), (255, 255, 255, 255))
        self.test_image9 = TargetCreator.create_specified_single_target("half_circle", "N", "I", 500, 2, (255, 0, 0, 255), (0, 0, 0, 255))
        self.test_image10 = TargetCreator.create_specified_single_target("half_circle", "E", "J", 500, 2, (255, 0, 0, 255), (0, 0, 0, 255))
        self.test_image11 = TargetCreator.create_specified_single_target("half_circle", "S", "K", 500, 2, (255, 0, 0, 255), (0, 0, 0, 255))
        self.test_image12 = TargetCreator.create_specified_single_target("half_circle", "W", "L", 500, 2, (255, 0, 0, 255), (0, 0, 0, 255))
        self.test_image13 = TargetCreator.create_specified_single_target("cross", "N", "M", 600, 2, (0, 255, 0, 255), (255, 0, 0, 255))
        self.test_image14 = TargetCreator.create_specified_single_target("cross", "D", "N", 600, 2, (0, 255, 0, 255), (255, 0, 0, 255))
        self.test_image15 = TargetCreator.create_specified_single_target("triangle", "N", "O", 600, 2, (0, 255, 0, 255), (255, 0, 0, 255))
        self.test_image16 = TargetCreator.create_specified_single_target("triangle", "S", "P", 600, 2, (0, 255, 0, 255), (255, 0, 0, 255))
        self.test_image17 = TargetCreator.create_specified_single_target("square", "N", "Q", 700, 3, (0, 0, 255, 255), (0, 255, 0, 255))
        self.test_image18 = TargetCreator.create_specified_single_target("square", "D", "R", 700, 3, (0, 0, 255, 255), (0, 255, 0, 255))
        self.test_image19 = TargetCreator.create_specified_single_target("rectangle", "NS", "S", 700, 3, (0, 0, 255, 255), (0, 255, 0, 255))
        self.test_image20 = TargetCreator.create_specified_single_target("rectangle", "EW", "T", 700, 3, (0, 0, 255, 255), (0, 255, 0, 255))
        self.test_image21 = TargetCreator.create_specified_single_target("trapezoid", "N", "U", 800, 3, (255, 255, 0, 255), (0, 0, 255, 255))
        self.test_image22 = TargetCreator.create_specified_single_target("trapezoid", "S", "V", 800, 3, (255, 255, 0, 255), (0, 0, 255, 255))
        self.test_image23 = TargetCreator.create_specified_single_target("pentagon", "N", "W", 800, 3, (255, 255, 0, 255), (0, 0, 255, 255))
        self.test_image24 = TargetCreator.create_specified_single_target("pentagon", "S", "X", 800, 3, (255, 255, 0, 255), (0, 0, 255, 255))
        self.test_image25 = TargetCreator.create_specified_single_target("hexagon", "N", "Y", 900, 3, (255, 0, 255, 255), (255, 255, 0, 255))
        self.test_image26 = TargetCreator.create_specified_single_target("hexagon", "D", "Z", 900, 3, (255, 0, 255, 255), (255, 255, 0, 255))
        self.test_image27 = TargetCreator.create_specified_single_target("heptagon", "N", "A", 900, 3, (255, 0, 255, 255), (255, 255, 0, 255))
        self.test_image28 = TargetCreator.create_specified_single_target("heptagon", "S", "B", 900, 3, (255, 0, 255, 255), (255, 255, 0, 255))
        self.test_image29 = TargetCreator.create_specified_single_target("octagon", "N", "C", 1000, 3, (0, 255, 255, 255), (255, 0, 255, 255))
        self.test_image30 = TargetCreator.create_specified_single_target("octagon", "D", "D", 1000, 3, (0, 255, 255, 255), (255, 0, 255, 255))
        self.test_image31 = TargetCreator.create_specified_single_target("star", "N", "E", 1000, 3, (0, 255, 255, 255), (255, 0, 255, 255))
        self.test_image32 = TargetCreator.create_specified_single_target("star", "S", "F", 1000, 3, (0, 255, 255, 255), (255, 0, 255, 255))

    def test_create_specified_single_target(self):
        self.assertTrue(abs(self.test_image0.width - 300) < 3)
        self.assertTrue(abs(self.test_image0.height - 300) < 3)
        self.assertTrue(self.test_image0.load()[1, 1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image0.load()[self.test_image0.width-1, self.test_image0.height-1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image0.load()[self.test_image0.width/2, self.test_image0.height/2] == (255, 255, 255, 255))

        self.assertTrue(abs(self.test_image1.width - (300 * math.sqrt(2))) < 3)
        self.assertTrue(abs(self.test_image1.height - 300) < 3)
        self.assertTrue(self.test_image1.load()[1, 1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image1.load()[self.test_image1.width-1, self.test_image1.height-1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image1.load()[self.test_image1.width/2, self.test_image1.height/2] == (255, 255, 255, 255))

        self.assertTrue(abs(self.test_image2.width - 300) < 3)
        self.assertTrue(abs(self.test_image2.height - 300) < 3)
        self.assertTrue(self.test_image2.load()[1, 1] == (255, 255, 255, 255))
        self.assertTrue(self.test_image2.load()[self.test_image2.width-1, self.test_image2.height-1] == (255, 255, 255, 255))
        self.assertTrue(self.test_image2.load()[self.test_image2.width/2, self.test_image2.height/2] == (0, 255, 255, 255))

        self.assertTrue(abs(self.test_image3.width - 300) < 3)
        self.assertTrue(abs(self.test_image3.height - (300 * math.sqrt(2))) < 3)
        self.assertTrue(self.test_image3.load()[1, 1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image3.load()[self.test_image3.width-1, self.test_image3.height-1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image3.load()[self.test_image3.width/2, self.test_image3.height/2] == (255, 255, 255, 255))

        self.assertTrue(abs(self.test_image4.width - 300) < 3)
        self.assertTrue(abs(self.test_image4.height - 300) < 3)
        self.assertTrue(self.test_image4.load()[1, 1] != (255, 255, 255, 255))
        self.assertTrue(self.test_image4.load()[self.test_image4.width-1, self.test_image4.height-1] == (255, 255, 255, 255))
        self.assertTrue(self.test_image4.load()[self.test_image4.width/2, self.test_image4.height/2] == (0, 255, 255, 255))

        self.assertTrue(abs(self.test_image5.width - (400 * math.sqrt(2))) < 3)
        self.assertTrue(abs(self.test_image5.height - 400) < 3)
        self.assertTrue(self.test_image5.load()[1, 1] != (0, 0, 0, 255))
        self.assertTrue(self.test_image5.load()[self.test_image5.width-1, self.test_image5.height-1] != (0, 0, 0, 255))
        self.assertTrue(self.test_image5.load()[self.test_image5.width/2, self.test_image5.height/2] == (255, 255, 255, 255))

        self.assertTrue(abs(self.test_image6.width - 400) < 3)
        self.assertTrue(abs(self.test_image6.height - 400) < 3)
        self.assertTrue(self.test_image6.load()[1, 1] == (0, 0, 0, 255))
        self.assertTrue(self.test_image6.load()[self.test_image6.width-1, self.test_image6.height-1] == (0, 0, 0, 255))
        self.assertTrue(self.test_image6.load()[self.test_image6.width/2, self.test_image6.height/2] == (0, 0, 0, 255))

        self.assertTrue(abs(self.test_image7.width - 400) < 3)
        self.assertTrue(abs(self.test_image7.height - (400 * math.sqrt(2))) < 3)
        self.assertTrue(self.test_image7.load()[1, 1] != (0, 0, 0, 255))
        self.assertTrue(self.test_image7.load()[self.test_image7.width-1, self.test_image7.height-1] != (0, 0, 0, 255))
        self.assertTrue(self.test_image7.load()[self.test_image7.width/2, self.test_image7.height/2] == (0, 0, 0, 255))

        self.assertTrue(abs(self.test_image8.width - 400) < 3)
        self.assertTrue(abs(self.test_image8.height - 400) < 3)
        self.assertTrue(self.test_image8.load()[1, 1] == (0, 0, 0, 255))
        self.assertTrue(self.test_image8.load()[self.test_image8.width-1, self.test_image8.height-1] != (0, 0, 0, 255))
        self.assertTrue(self.test_image8.load()[self.test_image8.width/2, self.test_image8.height/2] == (255, 255, 255, 255))

        self.assertTrue(abs(self.test_image9.width - 1000) < 3)
        self.assertTrue(abs(self.test_image9.height - 500) < 3)
        self.assertTrue(self.test_image9.load()[1, 1] == (255, 0, 0, 255))
        self.assertTrue(self.test_image9.load()[self.test_image9.width-1, self.test_image9.height-1] != (255, 0, 0, 255))
        self.assertTrue(self.test_image9.load()[self.test_image9.width/2, self.test_image9.height/2] == (0, 0, 0, 255))

        self.assertTrue(abs(self.test_image10.width - 500) < 3)
        self.assertTrue(abs(self.test_image10.height - 1000) < 3)
        self.assertTrue(self.test_image10.load()[1, 1] != (255, 0, 0, 255))
        self.assertTrue(self.test_image10.load()[self.test_image10.width-1, self.test_image10.height-1] == (255, 0, 0, 255))
        self.assertTrue(self.test_image10.load()[self.test_image10.width/2, self.test_image10.height/2] == (255, 0, 0, 255))

        self.assertTrue(abs(self.test_image11.width - 1000) < 3)
        self.assertTrue(abs(self.test_image11.height - 500) < 3)
        self.assertTrue(self.test_image11.load()[1, 1] != (255, 0, 0, 255))
        self.assertTrue(self.test_image11.load()[self.test_image11.width-1, self.test_image11.height-1] == (255, 0, 0, 255))
        self.assertTrue(self.test_image11.load()[self.test_image11.width/2, self.test_image11.height/2] == (0, 0, 0, 255))

        self.assertTrue(abs(self.test_image12.width - 500) < 3)
        self.assertTrue(abs(self.test_image12.height - 1000) < 3)
        self.assertTrue(self.test_image12.load()[1, 1] == (255, 0, 0, 255))
        self.assertTrue(self.test_image12.load()[self.test_image12.width-1, self.test_image12.height-1] != (255, 0, 0, 255))
        self.assertTrue(self.test_image12.load()[self.test_image12.width/2, self.test_image12.height/2] == (255, 0, 0, 255))

        self.assertTrue(abs(self.test_image13.width - 900) < 3)
        self.assertTrue(abs(self.test_image13.height - 900) < 3)
        self.assertTrue(self.test_image13.load()[1, 1] != (0, 255, 0, 255))
        self.assertTrue(self.test_image13.load()[self.test_image13.width-1, self.test_image13.height-1] != (0, 255, 0, 255))
        self.assertTrue(self.test_image13.load()[self.test_image13.width/2, self.test_image13.height/2] == (255, 0, 0, 255))

        self.assertTrue(abs(self.test_image14.width - (600 * math.sqrt(2))) < 3)
        self.assertTrue(abs(self.test_image14.height - (600 * math.sqrt(2))) < 3)
        self.assertTrue(self.test_image14.load()[1, 1] != (0, 255, 0, 255))
        self.assertTrue(self.test_image14.load()[self.test_image14.width-1, self.test_image14.height-1] != (0, 255, 0, 255))
        self.assertTrue(self.test_image14.load()[self.test_image14.width/2, self.test_image14.height/2] == (255, 0, 0, 255))

        self.assertTrue(abs(self.test_image15.width - 900) < 3)
        self.assertTrue(abs(self.test_image15.height - (450 * math.sqrt(3))) < 3)
        self.assertTrue(self.test_image15.load()[1, 1] != (0, 255, 0, 255))
        self.assertTrue(self.test_image15.load()[self.test_image15.width-1, self.test_image15.height-1] == (0, 255, 0, 255))
        self.assertTrue(self.test_image15.load()[self.test_image15.width/2, self.test_image15.height/2] == (0, 255, 0, 255))

        self.assertTrue(abs(self.test_image16.width - 900) < 3)
        self.assertTrue(abs(self.test_image16.height - (450 * math.sqrt(3))) < 3)
        self.assertTrue(self.test_image16.load()[1, 1] == (0, 255, 0, 255))
        self.assertTrue(self.test_image16.load()[self.test_image16.width-1, self.test_image16.height-1] != (0, 255, 0, 255))
        self.assertTrue(self.test_image16.load()[self.test_image16.width/2, self.test_image16.height/2] == (0, 255, 0, 255))

        self.assertTrue(abs(self.test_image17.width - (350 * math.sqrt(2))) < 3)
        self.assertTrue(abs(self.test_image17.height - (350 * math.sqrt(2))) < 3)
        self.assertTrue(self.test_image17.load()[1, 1] != (0, 0, 255, 255))
        self.assertTrue(self.test_image17.load()[self.test_image17.width-1, self.test_image17.height-1] != (0, 0, 255, 255))
        self.assertTrue(self.test_image17.load()[self.test_image17.width/2, self.test_image17.height/2] == (0, 0, 255, 255))

        self.assertTrue(abs(self.test_image18.width - 350) < 3)
        self.assertTrue(abs(self.test_image18.height - 350) < 3)
        self.assertTrue(self.test_image18.load()[1, 1] == (0, 0, 255, 255))
        self.assertTrue(self.test_image18.load()[self.test_image18.width-1, self.test_image18.height-1] == (0, 0, 255, 255))
        self.assertTrue(self.test_image18.load()[self.test_image18.width/2, self.test_image18.height/2] == (0, 255, 0, 255))

        self.assertTrue(abs(self.test_image19.width - 350) < 3)
        self.assertTrue(abs(self.test_image19.height - 525) < 3)
        self.assertTrue(self.test_image19.load()[1, 1] == (0, 0, 255, 255))
        self.assertTrue(self.test_image19.load()[self.test_image19.width-1, self.test_image19.height-1] == (0, 0, 255, 255))
        self.assertTrue(self.test_image19.load()[self.test_image19.width/2, self.test_image19.height/2] == (0, 255, 0, 255))

        self.assertTrue(abs(self.test_image20.width - 525) < 3)
        self.assertTrue(abs(self.test_image20.height - 350) < 3)
        self.assertTrue(self.test_image20.load()[1, 1] == (0, 0, 255, 255))
        self.assertTrue(self.test_image20.load()[self.test_image20.width-1, self.test_image20.height-1] == (0, 0, 255, 255))
        self.assertTrue(self.test_image20.load()[self.test_image20.width/2, self.test_image20.height/2] == (0, 255, 0, 255))

        self.assertTrue(abs(self.test_image21.width - 800) < 3)
        self.assertTrue(abs(self.test_image21.height - 400) < 3)
        self.assertTrue(self.test_image21.load()[1, 1] != (255, 255, 0, 255))
        self.assertTrue(self.test_image21.load()[self.test_image21.width-1, self.test_image21.height-1] == (255, 255, 0, 255))
        self.assertTrue(self.test_image21.load()[self.test_image21.width/2, self.test_image21.height/2] == (255, 255, 0, 255))

        self.assertTrue(abs(self.test_image22.width - 800) < 3)
        self.assertTrue(abs(self.test_image22.height - 400) < 3)
        self.assertTrue(self.test_image22.load()[1, 1] == (255, 255, 0, 255))
        self.assertTrue(self.test_image22.load()[self.test_image22.width-1, self.test_image22.height-1] != (255, 255, 0, 255))
        self.assertTrue(self.test_image22.load()[self.test_image22.width/2, self.test_image22.height/2] == (255, 255, 0, 255))

        self.assertTrue(abs(self.test_image23.width - (800 * math.sin(math.radians(72)))) < 3)
        self.assertTrue(abs(self.test_image23.height - (400 + (400 * math.cos(math.radians(36))))) < 3)
        self.assertTrue(self.test_image23.load()[1, 1] != (255, 255, 0, 255))
        self.assertTrue(self.test_image23.load()[self.test_image23.width-1, self.test_image23.height-1] != (255, 255, 0, 255))
        self.assertTrue(self.test_image23.load()[self.test_image23.width/2, self.test_image23.height/2] == (0, 0, 255, 255))

        self.assertTrue(abs(self.test_image24.width - (800 * math.sin(math.radians(72)))) < 3)
        self.assertTrue(abs(self.test_image24.height - (400 + (400 * math.cos(math.radians(36))))) < 3)
        self.assertTrue(self.test_image24.load()[1, 1] != (255, 255, 0, 255))
        self.assertTrue(self.test_image24.load()[self.test_image24.width-1, self.test_image24.height-1] != (255, 255, 0, 255))
        self.assertTrue(self.test_image24.load()[self.test_image24.width/2, self.test_image24.height/2] == (255, 255, 0, 255))

        self.assertTrue(abs(self.test_image25.width - (450 * math.sqrt(3))) < 3)
        self.assertTrue(abs(self.test_image25.height - 900) < 3)
        self.assertTrue(self.test_image25.load()[1, 1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image25.load()[self.test_image25.width-1, self.test_image25.height-1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image25.load()[self.test_image25.width/2, self.test_image25.height/2] == (255, 255, 0, 255))

        self.assertTrue(abs(self.test_image26.width - 900) < 3)
        self.assertTrue(abs(self.test_image26.height - (450 * math.sqrt(3))) < 3)
        self.assertTrue(self.test_image26.load()[1, 1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image26.load()[self.test_image26.width-1, self.test_image26.height-1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image26.load()[self.test_image26.width/2, self.test_image26.height/2] == (255, 255, 0, 255))

        self.assertTrue(abs(self.test_image27.width - (900 * math.sin(math.radians(540/7)))) < 3)
        self.assertTrue(abs(self.test_image27.height - (450 + (450 * math.cos(math.radians(360/14))))) < 3)
        self.assertTrue(self.test_image27.load()[1, 1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image27.load()[self.test_image27.width-1, self.test_image27.height-1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image27.load()[self.test_image27.width/2, self.test_image27.height/2] == (255, 0, 255, 255))

        self.assertTrue(abs(self.test_image28.width - (900 * math.sin(math.radians(540/7)))) < 3)
        self.assertTrue(abs(self.test_image28.height - (450 + (450 * math.cos(math.radians(360/14))))) < 3)
        self.assertTrue(self.test_image28.load()[1, 1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image28.load()[self.test_image28.width-1, self.test_image28.height-1] != (255, 0, 255, 255))
        self.assertTrue(self.test_image28.load()[self.test_image28.width/2, self.test_image28.height/2] == (255, 255, 0, 255))

        self.assertTrue(abs(self.test_image29.width - 1000) < 3)
        self.assertTrue(abs(self.test_image29.height - 1000) < 3)
        self.assertTrue(self.test_image29.load()[1, 1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image29.load()[self.test_image29.width-1, self.test_image29.height-1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image29.load()[self.test_image29.width/2, self.test_image29.height/2] == (0, 255, 255, 255))

        self.assertTrue(abs(self.test_image30.width - (1000 * math.cos(math.radians(22.5)))) < 3)
        self.assertTrue(abs(self.test_image30.height - (1000 * math.cos(math.radians(22.5)))) < 3)
        self.assertTrue(self.test_image30.load()[1, 1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image30.load()[self.test_image30.width-1, self.test_image30.height-1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image30.load()[self.test_image30.width/2, self.test_image30.height/2] == (0, 255, 255, 255))

        self.assertTrue(abs(self.test_image31.width - (2 * 1000 / 2 * math.sin(math.radians(72)))) < 3)
        self.assertTrue(abs(self.test_image31.height - ((1000 / 2) + (1000 / 2 * math.cos(math.radians(36))))) < 3)
        self.assertTrue(self.test_image31.load()[1, 1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image31.load()[self.test_image31.width-1, self.test_image31.height-1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image31.load()[self.test_image31.width/2, self.test_image31.height/2] == (0, 255, 255, 255))

        self.assertTrue(abs(self.test_image32.width - (2 * 1000 / 2 * math.sin(math.radians(72)))) < 3)
        self.assertTrue(abs(self.test_image32.height - ((1000 / 2) + (1000 / 2 * math.cos(math.radians(36))))) < 3)
        self.assertTrue(self.test_image32.load()[1, 1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image32.load()[self.test_image32.width-1, self.test_image32.height-1] != (0, 255, 255, 255))
        self.assertTrue(self.test_image32.load()[self.test_image32.width/2, self.test_image32.height/2] == (0, 255, 255, 255))
