import sys
from os import walk
import numpy as np
import json
import timeit

from classify_color import ColorClassifier

class ClassifierTester(object):
	"""
	Provides convenience functions to extended classes.
	"""

	def str_is_int(self, s):
		"""

		Borrowed from:
			https://stackoverflow.com/a/1267145
		"""
		try: 
			int(s)
			return True
		except ValueError:
			return False

	def compare_results(self, answer_dir, answer_field, answer_trans, results, verbose=False):
		"""
		Check to see if the results generated by a classifier are correct/not.

		:param answer_dir:		directory of the answers in JSON files.
		:param answer_field:	field within the JSON file where the answer is.

								accepts multiple fields. for example, if the
								answer field is in ["targets"][0]["shape_color"],
								then you pass in answer_field:

								"targets.0.shape_color"
		:param results:			one-dimensional list with each index
								corresponding with the answer file.
		:param verbose:			highly detailed output. default: false for off.
		"""
		start = timeit.default_timer()

		# load answers
		answers_files = []

		for(dirpath, dirnames, filenames) in walk(answer_dir):
			answers_files = filenames

		answers_files.sort(key=lambda f: int(filter(str.isdigit, f)))

		answers_files = answers_files[0:len(results)]

		if verbose:
			print("classifier.py: Loading in image files...")

		answers = []

		for answer_file in answers_files:
			p = json.load(open(answer_dir + "/" + answer_file))

			for i in answer_field.split("."):
				if self.str_is_int(i):
					p = p[int(i)]
				else:
					p = p[i]

			answers.append(p)

			if verbose:
				print("classifier.py: Loaded answer '" + str(p) + "'.")

		if verbose:
			print("classifier.py: Starting answer result comparison.")

		#sys.exit()

		# compare
		i = 0 

		correct = 0
		false   = 0

		for result in results:
			if str(result) == str(answers[i]):
				correct += 1

				if verbose:
					print("classifier.py: CORRECT: image #" + str(i) + " identified CORRECTLY as " + str(answers[i]) + ".")
			else:
				false += 1

				if verbose:
					print("classifier.py: WRONG: image #" + str(i) + " identified INCORRECTLY as " + str(result) + ".")

			i += 1

		if verbose:
			print("classifier.py: Completed comparison.")

		print("")
		print("### COMPARE RESULTS ###")

		end = timeit.default_timer()

		print("Compared " + str(i) + " results in " + str(round(end - start, 4)) + " ms")
		print("")
		print("Results:")
		print("  Correctly identified images:   " + str(correct))
		print("  Incorrectly identified images: " + str(false))
		print("")
		#print("correct=" + str(correct) + " len(answers)=" + str(len(answers)))
		print("  Success rate: " + str( round( float(correct) / float(len(answers)), 4 ) * 100.0 ) + "%")
		print("")

	def print_image_filenames(self):
		"""
		Prints out all the 
		"""
		np.set_printoptions(threshold=np.nan)
		print(self.imgs)


main = ClassifierTester()

### color tester
test = ColorClassifier()
test.load_images("targets/single_targets", count=10)
results = test.get_colors(verbose=False)

def answer_converter(answer):
	return True

### color tester

main.compare_results("targets/single_targets_answers/", "targets.0.shape_color", answer_converter, results, verbose=False)

